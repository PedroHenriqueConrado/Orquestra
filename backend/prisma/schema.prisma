generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:admin123@localhost:3306/orquestra"
}

model User {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(100)
  email            String            @unique(map: "email") @db.VarChar(150)
  password_hash    String            @db.VarChar(255)
  role             Role              @default(developer)
  profileImage     String?           @db.VarChar(255)
  created_at       DateTime          @default(now()) @db.DateTime(0)
  updated_at       DateTime          @default(now()) @updatedAt @db.DateTime(0)
  chatMessages     ChatMessage[]
  documentVersions DocumentVersion[] @relation("UploadedVersions")
  documents        Document[]        @relation("CreatedDocuments")
  notifications    Notification[]
  projects         ProjectMember[]
  tasks            Task[]            @relation("AssignedTasks")
  taskComments     TaskComment[]
  taskHistory      TaskHistory[]
  taskDocuments    TaskDocument[]    // Relação com documentos de tarefas
  sentMessages     DirectMessage[]   @relation("SentMessages")
  receivedMessages DirectMessage[]   @relation("ReceivedMessages")
  userChats        UserChat[]

  @@map("users")
}

model Project {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(150)
  description  String?         @db.Text
  created_at   DateTime        @default(now()) @db.DateTime(0)
  updated_at   DateTime        @default(now()) @updatedAt @db.DateTime(0)
  chatMessages ChatMessage[]
  documents    Document[]
  members      ProjectMember[]
  tasks        Task[]
  taskTags     TaskTag[]

  @@map("projects")
}

model ProjectMember {
  id         Int      @id @default(autoincrement())
  project_id Int
  user_id    Int
  role       Role
  joined_at  DateTime @default(now()) @db.DateTime(0)
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "fk_pm_project")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_pm_user")

  @@unique([project_id, user_id], name: "uq_project_user", map: "uq_project_user")
  @@index([project_id], map: "idx_pm_project")
  @@index([user_id], map: "idx_pm_user")
  @@map("project_members")
}

model Task {
  id             Int          @id @default(autoincrement())
  project_id     Int
  parent_task_id Int?
  title          String       @db.VarChar(200)
  description    String?      @db.Text
  status         TaskStatus   @default(pending)
  priority       TaskPriority @default(medium)
  assigned_to    Int?
  due_date       DateTime?    @db.Date
  estimated_hours Float?      @db.Float
  actual_hours    Float?      @db.Float
  created_at     DateTime     @default(now()) @db.DateTime(0)
  updated_at     DateTime     @default(now()) @updatedAt @db.DateTime(0)
  assignedUser   User?        @relation("AssignedTasks", fields: [assigned_to], references: [id], map: "fk_tasks_assigned")
  parentTask     Task?        @relation("SubTasks", fields: [parent_task_id], references: [id], map: "fk_tasks_parent")
  subTasks       Task[]       @relation("SubTasks")
  project        Project      @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "fk_tasks_project")
  comments       TaskComment[]
  history        TaskHistory[]
  tags           TaskToTag[]
  documents      TaskDocument[] // Relação com documentos

  @@index([project_id], map: "idx_tasks_project")
  @@index([parent_task_id], map: "idx_tasks_parent")
  @@index([assigned_to], map: "idx_tasks_assigned")
  @@map("tasks")
}

model Document {
  id         Int               @id @default(autoincrement())
  project_id Int
  title      String            @db.VarChar(200)
  created_at DateTime          @default(now()) @db.DateTime(0)
  created_by Int
  versions   DocumentVersion[]
  project    Project           @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "fk_docs_project")
  creator    User              @relation("CreatedDocuments", fields: [created_by], references: [id], map: "fk_docs_user")
  tasks      TaskDocument[]    // Relação com tarefas

  @@index([project_id], map: "idx_docs_project")
  @@index([created_by], map: "idx_docs_created_by")
  @@map("documents")
}

model DocumentVersion {
  id             Int      @id @default(autoincrement())
  document_id    Int
  version_number Int
  file_path      String   @db.VarChar(255)
  original_name  String   @db.VarChar(255)
  mime_type      String   @db.VarChar(100)
  size           Int
  is_compressed  Boolean  @default(false)
  uploaded_at    DateTime @default(now()) @db.DateTime(0)
  uploaded_by    Int
  document       Document @relation(fields: [document_id], references: [id], onDelete: Cascade, map: "fk_dv_document")
  uploader       User     @relation("UploadedVersions", fields: [uploaded_by], references: [id], map: "fk_dv_user")

  @@unique([document_id, version_number], name: "uq_doc_version", map: "uq_doc_version")
  @@index([document_id], map: "idx_dv_document")
  @@index([uploaded_by], map: "idx_dv_uploaded_by")
  @@map("document_versions")
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  project_id Int
  user_id    Int
  message    String   @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(0)
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "fk_chat_project")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_chat_user")

  @@index([project_id], map: "idx_chat_project")
  @@index([user_id], map: "idx_chat_user")
  @@map("chat_messages")
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  content    String   @db.Text
  is_read    Boolean  @default(false)
  created_at DateTime @default(now()) @db.DateTime(0)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_notif_user")

  @@index([user_id, is_read], map: "idx_notif_user_read")
  @@map("notifications")
}

enum Role {
  developer
  supervisor
  tutor
  project_manager
  team_leader
  admin
}

enum TaskStatus {
  pending
  in_progress
  completed
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

model TaskTag {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(50)
  color      String   @db.VarChar(7)
  project_id Int
  created_at DateTime @default(now()) @db.DateTime(0)
  tasks      TaskToTag[]
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "fk_tag_project")

  @@unique([project_id, name], map: "uq_project_tag")
  @@index([project_id], map: "idx_tag_project")
  @@map("task_tags")
}

model TaskToTag {
  task_id Int
  tag_id  Int
  task    Task    @relation(fields: [task_id], references: [id], onDelete: Cascade, map: "fk_tt_task")
  tag     TaskTag @relation(fields: [tag_id], references: [id], onDelete: Cascade, map: "fk_tt_tag")

  @@id([task_id, tag_id])
  @@map("task_to_tags")
}

model TaskComment {
  id         Int      @id @default(autoincrement())
  task_id    Int
  user_id    Int
  content    String   @db.Text
  rating     Int?     @db.TinyInt // Rating de 0 a 10, opcional
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(0)
  task       Task     @relation(fields: [task_id], references: [id], onDelete: Cascade, map: "fk_comment_task")
  user       User     @relation(fields: [user_id], references: [id], map: "fk_comment_user")

  @@index([task_id], map: "idx_comment_task")
  @@index([user_id], map: "idx_comment_user")
  @@map("task_comments")
}

model TaskHistory {
  id           Int      @id @default(autoincrement())
  task_id      Int
  user_id      Int
  field_name   String   @db.VarChar(50)
  old_value    String?  @db.Text
  new_value    String?  @db.Text
  created_at   DateTime @default(now()) @db.DateTime(0)
  task         Task     @relation(fields: [task_id], references: [id], onDelete: Cascade, map: "fk_history_task")
  user         User     @relation(fields: [user_id], references: [id], map: "fk_history_user")

  @@index([task_id], map: "idx_history_task")
  @@index([user_id], map: "idx_history_user")
  @@map("task_history")
}

model UserChat {
  id         Int             @id @default(autoincrement())
  name       String?         @db.VarChar(100)
  is_group   Boolean         @default(false)
  created_at DateTime        @default(now()) @db.DateTime(0)
  updated_at DateTime        @default(now()) @updatedAt @db.DateTime(0)
  messages   DirectMessage[]
  users      User[]

  @@map("user_chats")
}

model DirectMessage {
  id           Int      @id @default(autoincrement())
  chat_id      Int
  sender_id    Int
  receiver_id  Int
  message      String   @db.Text
  is_read      Boolean  @default(false)
  created_at   DateTime @default(now()) @db.DateTime(0)
  updated_at   DateTime @default(now()) @updatedAt @db.DateTime(0)
  chat         UserChat @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  sender       User     @relation("SentMessages", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver     User     @relation("ReceivedMessages", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@index([chat_id], map: "idx_dm_chat")
  @@index([sender_id], map: "idx_dm_sender")
  @@index([receiver_id], map: "idx_dm_receiver")
  @@map("direct_messages")
}

// Modelo de junção entre Task e Document
model TaskDocument {
  task_id       Int
  document_id   Int
  added_at      DateTime @default(now()) @db.DateTime(0)
  added_by      Int
  task          Task     @relation(fields: [task_id], references: [id], onDelete: Cascade, map: "fk_td_task")
  document      Document @relation(fields: [document_id], references: [id], onDelete: Cascade, map: "fk_td_document")
  user          User     @relation(fields: [added_by], references: [id], map: "fk_td_user")

  @@id([task_id, document_id])
  @@index([task_id], map: "idx_td_task")
  @@index([document_id], map: "idx_td_document")
  @@index([added_by], map: "idx_td_added_by")
  @@map("task_documents")
}
 